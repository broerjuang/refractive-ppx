name: refractive_ppx pipeline

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  test_and_build_linux:
    name: ${{ matrix.os }}/node-${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        os: [ubuntu-latest]

    container:
      # https://github.com/baransu/docker-esy
      image: cichocinski/docker-esy:alpine3.8

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: esy install
        run: esy install

      - name: Print esy cache
        id: print_esy_cache
        run: node .github/workflows/print_esy_cache.js

      - name: Restore esy cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: v1-esy-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: |
            v1-esy-${{ matrix.os }}-

      - name: esy build
        run: esy build

      - name: strip binary
        run: strip _build/default/bin/Bin.exe

      - name: (only on release) Upload artifacts ${{ matrix.os }}
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: _build/default/bin/Bin.exe

  test_and_build:
    name: ${{ matrix.os }}/node-${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        os: [windows-2019, macOS-latest]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install esy
        run: npm install -g esy@0.6.2

      - name: esy install
        run: esy install

      - name: Print esy cache
        id: print_esy_cache
        run: node .github/workflows/print_esy_cache.js

      - name: Restore esy cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: v1-esy-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: |
            v1-esy-${{ matrix.os }}-

      - name: esy install
        run: esy install

      - name: esy build
        run: esy build

      - name: strip binary
        run: |
          strip _build/default/bin/Bin.exe

      - name: (only on release) Upload artifacts ${{ matrix.os }}
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: _build/default/bin/Bin.exe

  publish:
    needs:
      - test_and_build
      - test_and_build_linux
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
    name: (only on release) Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
          registry-url: "https://registry.npmjs.org"

      - name: Download linux artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: binaries/linux

      - name: Download macOS artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-latest
          path: binaries/darwin

      - name: Download windows artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: windows-2019
          path: binaries/windows

      - name: Move artifacts
        if: success()
        run: |
          mkdir -p bin
          mv binaries/darwin/Bin.exe bin/refractive_ppx-darwin-x64.exe
          mv binaries/windows/Bin.exe bin/refractive_ppx-win-x64.exe
          mv binaries/linux/Bin.exe bin/refractive_ppx-linux-x64.exe

      - name: Publish
        if: success()
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
